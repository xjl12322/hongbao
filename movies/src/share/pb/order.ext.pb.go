// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.ext.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WantTicketReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	FilmId int64 `protobuf:"varint,2,opt,name=filmId" json:"filmId,omitempty"`
	Type   int64 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *WantTicketReq) Reset()                    { *m = WantTicketReq{} }
func (m *WantTicketReq) String() string            { return proto.CompactTextString(m) }
func (*WantTicketReq) ProtoMessage()               {}
func (*WantTicketReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *WantTicketReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *WantTicketReq) GetFilmId() int64 {
	if m != nil {
		return m.FilmId
	}
	return 0
}

func (m *WantTicketReq) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type WantTicketRsp struct {
}

func (m *WantTicketRsp) Reset()                    { *m = WantTicketRsp{} }
func (m *WantTicketRsp) String() string            { return proto.CompactTextString(m) }
func (*WantTicketRsp) ProtoMessage()               {}
func (*WantTicketRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type TicketReq struct {
	UserId    int64  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	FilmId    int64  `protobuf:"varint,2,opt,name=filmId" json:"filmId,omitempty"`
	MhId      int64  `protobuf:"varint,3,opt,name=mhId" json:"mhId,omitempty"`
	X         int64  `protobuf:"varint,4,opt,name=x" json:"x,omitempty"`
	Y         int64  `protobuf:"varint,5,opt,name=y" json:"y,omitempty"`
	StartTime string `protobuf:"bytes,6,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,7,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *TicketReq) Reset()                    { *m = TicketReq{} }
func (m *TicketReq) String() string            { return proto.CompactTextString(m) }
func (*TicketReq) ProtoMessage()               {}
func (*TicketReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *TicketReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TicketReq) GetFilmId() int64 {
	if m != nil {
		return m.FilmId
	}
	return 0
}

func (m *TicketReq) GetMhId() int64 {
	if m != nil {
		return m.MhId
	}
	return 0
}

func (m *TicketReq) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TicketReq) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *TicketReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TicketReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type TicketRsp struct {
	OrderNumD int64 `protobuf:"varint,1,opt,name=orderNumD" json:"orderNumD,omitempty"`
}

func (m *TicketRsp) Reset()                    { *m = TicketRsp{} }
func (m *TicketRsp) String() string            { return proto.CompactTextString(m) }
func (*TicketRsp) ProtoMessage()               {}
func (*TicketRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *TicketRsp) GetOrderNumD() int64 {
	if m != nil {
		return m.OrderNumD
	}
	return 0
}

type Order struct {
	OrderNum   string `protobuf:"bytes,1,opt,name=orderNum" json:"orderNum,omitempty"`
	OrderPrice string `protobuf:"bytes,2,opt,name=orderPrice" json:"orderPrice,omitempty"`
	CreateAt   string `protobuf:"bytes,3,opt,name=createAt" json:"createAt,omitempty"`
	PayAt      string `protobuf:"bytes,4,opt,name=payAt" json:"payAt,omitempty"`
	MhId       int64  `protobuf:"varint,5,opt,name=mhId" json:"mhId,omitempty"`
	UserId     int64  `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	MovieId    int64  `protobuf:"varint,7,opt,name=movieId" json:"movieId,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *Order) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *Order) GetOrderPrice() string {
	if m != nil {
		return m.OrderPrice
	}
	return ""
}

func (m *Order) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Order) GetPayAt() string {
	if m != nil {
		return m.PayAt
	}
	return ""
}

func (m *Order) GetMhId() int64 {
	if m != nil {
		return m.MhId
	}
	return 0
}

func (m *Order) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Order) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type MovieTicket struct {
	FilmName  string `protobuf:"bytes,1,opt,name=filmName" json:"filmName,omitempty"`
	StartTime string `protobuf:"bytes,2,opt,name=startTime" json:"startTime,omitempty"`
	Cinema    string `protobuf:"bytes,3,opt,name=cinema" json:"cinema,omitempty"`
	OrderNum  string `protobuf:"bytes,4,opt,name=orderNum" json:"orderNum,omitempty"`
}

func (m *MovieTicket) Reset()                    { *m = MovieTicket{} }
func (m *MovieTicket) String() string            { return proto.CompactTextString(m) }
func (*MovieTicket) ProtoMessage()               {}
func (*MovieTicket) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *MovieTicket) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *MovieTicket) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *MovieTicket) GetCinema() string {
	if m != nil {
		return m.Cinema
	}
	return ""
}

func (m *MovieTicket) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

type LookOrdersReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *LookOrdersReq) Reset()                    { *m = LookOrdersReq{} }
func (m *LookOrdersReq) String() string            { return proto.CompactTextString(m) }
func (*LookOrdersReq) ProtoMessage()               {}
func (*LookOrdersReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LookOrdersReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type LookOrdersRsp struct {
	MovieTickets []*MovieTicket `protobuf:"bytes,1,rep,name=movieTickets" json:"movieTickets,omitempty"`
}

func (m *LookOrdersRsp) Reset()                    { *m = LookOrdersRsp{} }
func (m *LookOrdersRsp) String() string            { return proto.CompactTextString(m) }
func (*LookOrdersRsp) ProtoMessage()               {}
func (*LookOrdersRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *LookOrdersRsp) GetMovieTickets() []*MovieTicket {
	if m != nil {
		return m.MovieTickets
	}
	return nil
}

type PayOrderReq struct {
	OrderNum string `protobuf:"bytes,1,opt,name=orderNum" json:"orderNum,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Phone    int64  `protobuf:"varint,3,opt,name=phone" json:"phone,omitempty"`
}

func (m *PayOrderReq) Reset()                    { *m = PayOrderReq{} }
func (m *PayOrderReq) String() string            { return proto.CompactTextString(m) }
func (*PayOrderReq) ProtoMessage()               {}
func (*PayOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *PayOrderReq) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *PayOrderReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PayOrderReq) GetPhone() int64 {
	if m != nil {
		return m.Phone
	}
	return 0
}

type PayOrderRsp struct {
}

func (m *PayOrderRsp) Reset()                    { *m = PayOrderRsp{} }
func (m *PayOrderRsp) String() string            { return proto.CompactTextString(m) }
func (*PayOrderRsp) ProtoMessage()               {}
func (*PayOrderRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

type UndoOrderReq struct {
	OrderId int64 `protobuf:"varint,1,opt,name=orderId" json:"orderId,omitempty"`
}

func (m *UndoOrderReq) Reset()                    { *m = UndoOrderReq{} }
func (m *UndoOrderReq) String() string            { return proto.CompactTextString(m) }
func (*UndoOrderReq) ProtoMessage()               {}
func (*UndoOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *UndoOrderReq) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type UndoOrderRsp struct {
}

func (m *UndoOrderRsp) Reset()                    { *m = UndoOrderRsp{} }
func (m *UndoOrderRsp) String() string            { return proto.CompactTextString(m) }
func (*UndoOrderRsp) ProtoMessage()               {}
func (*UndoOrderRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

type GetOrderMessageReq struct {
	OrderNum string `protobuf:"bytes,1,opt,name=orderNum" json:"orderNum,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetOrderMessageReq) Reset()                    { *m = GetOrderMessageReq{} }
func (m *GetOrderMessageReq) String() string            { return proto.CompactTextString(m) }
func (*GetOrderMessageReq) ProtoMessage()               {}
func (*GetOrderMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *GetOrderMessageReq) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *GetOrderMessageReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetOrderMessageRsp struct {
	TicketDetail *TicketDetail `protobuf:"bytes,1,opt,name=ticketDetail" json:"ticketDetail,omitempty"`
}

func (m *GetOrderMessageRsp) Reset()                    { *m = GetOrderMessageRsp{} }
func (m *GetOrderMessageRsp) String() string            { return proto.CompactTextString(m) }
func (*GetOrderMessageRsp) ProtoMessage()               {}
func (*GetOrderMessageRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *GetOrderMessageRsp) GetTicketDetail() *TicketDetail {
	if m != nil {
		return m.TicketDetail
	}
	return nil
}

type TicketDetail struct {
	FilmName      string  `protobuf:"bytes,1,opt,name=filmName" json:"filmName,omitempty"`
	FilmImg       string  `protobuf:"bytes,2,opt,name=filmImg" json:"filmImg,omitempty"`
	StartTime     string  `protobuf:"bytes,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime       string  `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
	CinemaName    string  `protobuf:"bytes,5,opt,name=cinemaName" json:"cinemaName,omitempty"`
	MhName        string  `protobuf:"bytes,6,opt,name=mhName" json:"mhName,omitempty"`
	Seat          string  `protobuf:"bytes,7,opt,name=seat" json:"seat,omitempty"`
	OrderNum      string  `protobuf:"bytes,8,opt,name=orderNum" json:"orderNum,omitempty"`
	CinemaAddress string  `protobuf:"bytes,9,opt,name=cinemaAddress" json:"cinemaAddress,omitempty"`
	Price         float32 `protobuf:"fixed32,10,opt,name=price" json:"price,omitempty"`
	CreateAt      string  `protobuf:"bytes,11,opt,name=createAt" json:"createAt,omitempty"`
	Phone         int64   `protobuf:"varint,12,opt,name=phone" json:"phone,omitempty"`
	CinemaPhone   int64   `protobuf:"varint,13,opt,name=cinemaPhone" json:"cinemaPhone,omitempty"`
}

func (m *TicketDetail) Reset()                    { *m = TicketDetail{} }
func (m *TicketDetail) String() string            { return proto.CompactTextString(m) }
func (*TicketDetail) ProtoMessage()               {}
func (*TicketDetail) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *TicketDetail) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *TicketDetail) GetFilmImg() string {
	if m != nil {
		return m.FilmImg
	}
	return ""
}

func (m *TicketDetail) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TicketDetail) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TicketDetail) GetCinemaName() string {
	if m != nil {
		return m.CinemaName
	}
	return ""
}

func (m *TicketDetail) GetMhName() string {
	if m != nil {
		return m.MhName
	}
	return ""
}

func (m *TicketDetail) GetSeat() string {
	if m != nil {
		return m.Seat
	}
	return ""
}

func (m *TicketDetail) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *TicketDetail) GetCinemaAddress() string {
	if m != nil {
		return m.CinemaAddress
	}
	return ""
}

func (m *TicketDetail) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TicketDetail) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *TicketDetail) GetPhone() int64 {
	if m != nil {
		return m.Phone
	}
	return 0
}

func (m *TicketDetail) GetCinemaPhone() int64 {
	if m != nil {
		return m.CinemaPhone
	}
	return 0
}

type LookAlreadyOrdersReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *LookAlreadyOrdersReq) Reset()                    { *m = LookAlreadyOrdersReq{} }
func (m *LookAlreadyOrdersReq) String() string            { return proto.CompactTextString(m) }
func (*LookAlreadyOrdersReq) ProtoMessage()               {}
func (*LookAlreadyOrdersReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *LookAlreadyOrdersReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// messages:{"totalMovie":2,"oneNoComment":2,"movies":[{"filmImg":"http://img5.mtime.cn/mt/2017/10/23/101938.17733324_1280X720X2.jpg","filmName":"悟空传","time":"2017-07-13","director":"果子酱","actorNames":["彭于晏","欧豪"],"orderNum":"201701021003123"},{"filmImg":"http://img5.mtime.cn/mt/2017/10/23/101938.17733324_1280X720X2.jpg","filmName":"悟空传","time":"2017-07-13","director":"果子酱","actorNames":["彭于晏","欧豪"],"orderNum":"201701021003123"}]}
type LookAlreadyOrdersRsp struct {
	TotalMovie   int64           `protobuf:"varint,1,opt,name=totalMovie" json:"totalMovie,omitempty"`
	OneNoComment int64           `protobuf:"varint,2,opt,name=oneNoComment" json:"oneNoComment,omitempty"`
	Movies       []*AlreadyMovie `protobuf:"bytes,3,rep,name=movies" json:"movies,omitempty"`
}

func (m *LookAlreadyOrdersRsp) Reset()                    { *m = LookAlreadyOrdersRsp{} }
func (m *LookAlreadyOrdersRsp) String() string            { return proto.CompactTextString(m) }
func (*LookAlreadyOrdersRsp) ProtoMessage()               {}
func (*LookAlreadyOrdersRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *LookAlreadyOrdersRsp) GetTotalMovie() int64 {
	if m != nil {
		return m.TotalMovie
	}
	return 0
}

func (m *LookAlreadyOrdersRsp) GetOneNoComment() int64 {
	if m != nil {
		return m.OneNoComment
	}
	return 0
}

func (m *LookAlreadyOrdersRsp) GetMovies() []*AlreadyMovie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type AlreadyMovie struct {
	FilmImg    string   `protobuf:"bytes,1,opt,name=filmImg" json:"filmImg,omitempty"`
	FilmName   string   `protobuf:"bytes,2,opt,name=filmName" json:"filmName,omitempty"`
	Time       string   `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Director   string   `protobuf:"bytes,4,opt,name=director" json:"director,omitempty"`
	ActorNames []string `protobuf:"bytes,5,rep,name=actorNames" json:"actorNames,omitempty"`
	OrderNum   string   `protobuf:"bytes,6,opt,name=orderNum" json:"orderNum,omitempty"`
}

func (m *AlreadyMovie) Reset()                    { *m = AlreadyMovie{} }
func (m *AlreadyMovie) String() string            { return proto.CompactTextString(m) }
func (*AlreadyMovie) ProtoMessage()               {}
func (*AlreadyMovie) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *AlreadyMovie) GetFilmImg() string {
	if m != nil {
		return m.FilmImg
	}
	return ""
}

func (m *AlreadyMovie) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *AlreadyMovie) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *AlreadyMovie) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *AlreadyMovie) GetActorNames() []string {
	if m != nil {
		return m.ActorNames
	}
	return nil
}

func (m *AlreadyMovie) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

type OrderCommentReq struct {
	UserId         int64  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Score          int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	CommentContent string `protobuf:"bytes,3,opt,name=commentContent" json:"commentContent,omitempty"`
	OrderNum       string `protobuf:"bytes,4,opt,name=orderNum" json:"orderNum,omitempty"`
	MovieId        int64  `protobuf:"varint,5,opt,name=movieId" json:"movieId,omitempty"`
}

func (m *OrderCommentReq) Reset()                    { *m = OrderCommentReq{} }
func (m *OrderCommentReq) String() string            { return proto.CompactTextString(m) }
func (*OrderCommentReq) ProtoMessage()               {}
func (*OrderCommentReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *OrderCommentReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OrderCommentReq) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *OrderCommentReq) GetCommentContent() string {
	if m != nil {
		return m.CommentContent
	}
	return ""
}

func (m *OrderCommentReq) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *OrderCommentReq) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type OrderCommentRsp struct {
}

func (m *OrderCommentRsp) Reset()                    { *m = OrderCommentRsp{} }
func (m *OrderCommentRsp) String() string            { return proto.CompactTextString(m) }
func (*OrderCommentRsp) ProtoMessage()               {}
func (*OrderCommentRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func init() {
	proto.RegisterType((*WantTicketReq)(nil), "pb.WantTicketReq")
	proto.RegisterType((*WantTicketRsp)(nil), "pb.WantTicketRsp")
	proto.RegisterType((*TicketReq)(nil), "pb.TicketReq")
	proto.RegisterType((*TicketRsp)(nil), "pb.TicketRsp")
	proto.RegisterType((*Order)(nil), "pb.Order")
	proto.RegisterType((*MovieTicket)(nil), "pb.MovieTicket")
	proto.RegisterType((*LookOrdersReq)(nil), "pb.LookOrdersReq")
	proto.RegisterType((*LookOrdersRsp)(nil), "pb.LookOrdersRsp")
	proto.RegisterType((*PayOrderReq)(nil), "pb.PayOrderReq")
	proto.RegisterType((*PayOrderRsp)(nil), "pb.PayOrderRsp")
	proto.RegisterType((*UndoOrderReq)(nil), "pb.UndoOrderReq")
	proto.RegisterType((*UndoOrderRsp)(nil), "pb.UndoOrderRsp")
	proto.RegisterType((*GetOrderMessageReq)(nil), "pb.GetOrderMessageReq")
	proto.RegisterType((*GetOrderMessageRsp)(nil), "pb.GetOrderMessageRsp")
	proto.RegisterType((*TicketDetail)(nil), "pb.TicketDetail")
	proto.RegisterType((*LookAlreadyOrdersReq)(nil), "pb.LookAlreadyOrdersReq")
	proto.RegisterType((*LookAlreadyOrdersRsp)(nil), "pb.LookAlreadyOrdersRsp")
	proto.RegisterType((*AlreadyMovie)(nil), "pb.AlreadyMovie")
	proto.RegisterType((*OrderCommentReq)(nil), "pb.OrderCommentReq")
	proto.RegisterType((*OrderCommentRsp)(nil), "pb.OrderCommentRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderServiceExt service

type OrderServiceExtClient interface {
	// 想看
	WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error)
	// 下单
	Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error)
	// 支付
	PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error)
	// 取消订单
	UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error)
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error)
	// 查看所有电影票
	LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error)
	// 查看所有看过的电影票
	LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error)
	// 进行评分
	OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error)
}

type orderServiceExtClient struct {
	c           client.Client
	serviceName string
}

func NewOrderServiceExtClient(serviceName string, c client.Client) OrderServiceExtClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &orderServiceExtClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *orderServiceExtClient) WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.WantTicket", in)
	out := new(WantTicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.Ticket", in)
	out := new(TicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.PayOrder", in)
	out := new(PayOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.UndoOrder", in)
	out := new(UndoOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.GetOrderMessage", in)
	out := new(GetOrderMessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.LookOrders", in)
	out := new(LookOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.LookAlreadyOrders", in)
	out := new(LookAlreadyOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtClient) OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error) {
	req := c.c.NewRequest(c.serviceName, "OrderServiceExt.OrderComment", in)
	out := new(OrderCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderServiceExt service

type OrderServiceExtHandler interface {
	// 想看
	WantTicket(context.Context, *WantTicketReq, *WantTicketRsp) error
	// 下单
	Ticket(context.Context, *TicketReq, *TicketRsp) error
	// 支付
	PayOrder(context.Context, *PayOrderReq, *PayOrderRsp) error
	// 取消订单
	UndoOrder(context.Context, *UndoOrderReq, *UndoOrderRsp) error
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(context.Context, *GetOrderMessageReq, *GetOrderMessageRsp) error
	// 查看所有电影票
	LookOrders(context.Context, *LookOrdersReq, *LookOrdersRsp) error
	// 查看所有看过的电影票
	LookAlreadyOrders(context.Context, *LookAlreadyOrdersReq, *LookAlreadyOrdersRsp) error
	// 进行评分
	OrderComment(context.Context, *OrderCommentReq, *OrderCommentRsp) error
}

func RegisterOrderServiceExtHandler(s server.Server, hdlr OrderServiceExtHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&OrderServiceExt{hdlr}, opts...))
}

type OrderServiceExt struct {
	OrderServiceExtHandler
}

func (h *OrderServiceExt) WantTicket(ctx context.Context, in *WantTicketReq, out *WantTicketRsp) error {
	return h.OrderServiceExtHandler.WantTicket(ctx, in, out)
}

func (h *OrderServiceExt) Ticket(ctx context.Context, in *TicketReq, out *TicketRsp) error {
	return h.OrderServiceExtHandler.Ticket(ctx, in, out)
}

func (h *OrderServiceExt) PayOrder(ctx context.Context, in *PayOrderReq, out *PayOrderRsp) error {
	return h.OrderServiceExtHandler.PayOrder(ctx, in, out)
}

func (h *OrderServiceExt) UndoOrder(ctx context.Context, in *UndoOrderReq, out *UndoOrderRsp) error {
	return h.OrderServiceExtHandler.UndoOrder(ctx, in, out)
}

func (h *OrderServiceExt) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, out *GetOrderMessageRsp) error {
	return h.OrderServiceExtHandler.GetOrderMessage(ctx, in, out)
}

func (h *OrderServiceExt) LookOrders(ctx context.Context, in *LookOrdersReq, out *LookOrdersRsp) error {
	return h.OrderServiceExtHandler.LookOrders(ctx, in, out)
}

func (h *OrderServiceExt) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, out *LookAlreadyOrdersRsp) error {
	return h.OrderServiceExtHandler.LookAlreadyOrders(ctx, in, out)
}

func (h *OrderServiceExt) OrderComment(ctx context.Context, in *OrderCommentReq, out *OrderCommentRsp) error {
	return h.OrderServiceExtHandler.OrderComment(ctx, in, out)
}

func init() { proto.RegisterFile("order.ext.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdf, 0x6e, 0xfb, 0x34,
	0x14, 0x26, 0x4d, 0xd3, 0x2e, 0xa7, 0xe9, 0xca, 0xcc, 0x34, 0x45, 0x11, 0x42, 0x95, 0x85, 0xa0,
	0xdc, 0x54, 0x62, 0xdb, 0x15, 0x77, 0xd5, 0x86, 0xa0, 0x88, 0x8d, 0x29, 0x1b, 0xda, 0x75, 0x96,
	0x98, 0x2d, 0x5a, 0xf3, 0x87, 0xd8, 0x9b, 0x5a, 0x71, 0xcb, 0x6b, 0x70, 0xc5, 0x0b, 0x70, 0xcf,
	0x7b, 0xf0, 0x24, 0x3c, 0x00, 0xf2, 0x71, 0xd2, 0xd8, 0xe9, 0xe8, 0x4f, 0xfa, 0xfd, 0xee, 0xfc,
	0x7d, 0x3e, 0x3e, 0xb1, 0x3f, 0x7f, 0xe7, 0x38, 0x30, 0x29, 0xaa, 0x84, 0x55, 0x73, 0xb6, 0x16,
	0xf3, 0xb2, 0x2a, 0x44, 0x41, 0x7a, 0xe5, 0x03, 0xbd, 0x85, 0xf1, 0x7d, 0x94, 0x8b, 0xbb, 0x34,
	0x7e, 0x66, 0x22, 0x64, 0xbf, 0x92, 0x13, 0x18, 0xbc, 0x70, 0x56, 0x2d, 0x13, 0xdf, 0x9a, 0x5a,
	0x33, 0x3b, 0xac, 0x91, 0xe4, 0x7f, 0x49, 0x57, 0xd9, 0x32, 0xf1, 0x7b, 0x8a, 0x57, 0x88, 0x10,
	0xe8, 0x8b, 0x4d, 0xc9, 0x7c, 0x1b, 0x59, 0x1c, 0xd3, 0x89, 0x91, 0x94, 0x97, 0xf4, 0x4f, 0x0b,
	0xdc, 0x0f, 0xfa, 0x44, 0xf6, 0xb4, 0x4c, 0x9a, 0x4f, 0xc8, 0x31, 0xf1, 0xc0, 0x5a, 0xfb, 0x7d,
	0x24, 0xac, 0xb5, 0x44, 0x1b, 0xdf, 0x51, 0x68, 0x43, 0x3e, 0x05, 0x97, 0x8b, 0xa8, 0x12, 0x77,
	0x69, 0xc6, 0xfc, 0xc1, 0xd4, 0x9a, 0xb9, 0x61, 0x4b, 0x10, 0x1f, 0x86, 0x2c, 0x4f, 0x70, 0x6e,
	0x88, 0x73, 0x0d, 0xa4, 0x5f, 0x6d, 0x37, 0xc9, 0x4b, 0x99, 0x04, 0xf5, 0xba, 0x7e, 0xc9, 0x2e,
	0xeb, 0x7d, 0xb6, 0x04, 0xfd, 0xdb, 0x02, 0xe7, 0x27, 0x89, 0x48, 0x00, 0x07, 0x0d, 0x8d, 0x61,
	0x6e, 0xb8, 0xc5, 0xe4, 0x33, 0x00, 0x1c, 0xdf, 0x54, 0x69, 0xcc, 0xf0, 0x50, 0x6e, 0xa8, 0x31,
	0x72, 0x6d, 0x5c, 0xb1, 0x48, 0xb0, 0x85, 0xc0, 0xc3, 0xb9, 0xe1, 0x16, 0x93, 0x63, 0x70, 0xca,
	0x68, 0xb3, 0x10, 0x78, 0x48, 0x37, 0x54, 0x60, 0x2b, 0x85, 0xa3, 0x49, 0xd1, 0xca, 0x39, 0x30,
	0xe4, 0xf4, 0x61, 0x98, 0x15, 0xaf, 0x29, 0x5b, 0x26, 0x78, 0x50, 0x3b, 0x6c, 0x20, 0xfd, 0x0d,
	0x46, 0x57, 0x72, 0xa8, 0x4e, 0x2b, 0xb7, 0x21, 0x95, 0xbe, 0x8e, 0x32, 0xd6, 0x1c, 0xa1, 0xc1,
	0xa6, 0x96, 0xbd, 0xae, 0x96, 0x27, 0x30, 0x88, 0xd3, 0x9c, 0x65, 0x51, 0xbd, 0xfd, 0x1a, 0x19,
	0xa2, 0xf4, 0x4d, 0x51, 0xe8, 0x97, 0x30, 0xfe, 0xb1, 0x28, 0x9e, 0x51, 0x3d, 0xbe, 0xc7, 0x0e,
	0xf4, 0xd2, 0x08, 0xe4, 0x25, 0x39, 0x03, 0x2f, 0x6b, 0xb7, 0xcd, 0x7d, 0x6b, 0x6a, 0xcf, 0x46,
	0xa7, 0x93, 0x79, 0xf9, 0x30, 0xd7, 0x8e, 0x13, 0x1a, 0x41, 0xf4, 0x1e, 0x46, 0x37, 0xd1, 0x06,
	0x93, 0xc8, 0x8f, 0xed, 0xbb, 0xae, 0x76, 0x23, 0x3d, 0x43, 0x48, 0x79, 0x15, 0x4f, 0x45, 0xde,
	0x78, 0x5c, 0x01, 0x3a, 0xd6, 0x12, 0xf3, 0x92, 0xce, 0xc0, 0xfb, 0x39, 0x4f, 0x8a, 0xed, 0x87,
	0x7c, 0x18, 0x62, 0xe2, 0xed, 0xb1, 0x1a, 0x48, 0x0f, 0xf5, 0x48, 0x5e, 0xd2, 0xef, 0x81, 0x7c,
	0xc7, 0x04, 0xc2, 0x2b, 0xc6, 0x79, 0xf4, 0xc8, 0xde, 0x73, 0xa3, 0xf4, 0x87, 0xdd, 0x4c, 0xbc,
	0x24, 0xe7, 0xe0, 0x09, 0x14, 0xe3, 0x92, 0x89, 0x28, 0x5d, 0x61, 0xb6, 0xd1, 0xe9, 0xc7, 0x52,
	0xb6, 0x3b, 0x8d, 0x0f, 0x8d, 0x28, 0xfa, 0x6f, 0x0f, 0x3c, 0x7d, 0x7a, 0xaf, 0x4b, 0x7c, 0x18,
	0x62, 0xad, 0x66, 0x8f, 0xb5, 0x47, 0x1a, 0x68, 0xfa, 0xc7, 0xde, 0x53, 0x8b, 0x7d, 0xa3, 0x16,
	0x65, 0xe9, 0x28, 0x2f, 0xe1, 0xf7, 0x1c, 0x55, 0x3a, 0x2d, 0x23, 0x25, 0xc8, 0x9e, 0x70, 0x4e,
	0x15, 0x78, 0x8d, 0x64, 0x81, 0x70, 0x16, 0x89, 0xba, 0xb4, 0x71, 0x6c, 0x48, 0x79, 0xd0, 0x91,
	0xf2, 0x73, 0x18, 0xab, 0xac, 0x8b, 0x24, 0xa9, 0x18, 0xe7, 0xbe, 0x8b, 0x01, 0x26, 0x89, 0x0e,
	0xc0, 0x1a, 0x86, 0xa9, 0x35, 0xeb, 0x85, 0x0a, 0x18, 0xe5, 0x3b, 0x7a, 0xa3, 0x7c, 0xd1, 0x33,
	0x9e, 0xe6, 0x19, 0x32, 0x85, 0x91, 0x4a, 0x7c, 0x83, 0x73, 0x63, 0x9c, 0xd3, 0x29, 0x3a, 0x87,
	0x63, 0x69, 0xfa, 0xc5, 0xaa, 0x62, 0x51, 0xb2, 0x79, 0x77, 0x91, 0xfc, 0x6e, 0xbd, 0xb5, 0x80,
	0x97, 0x52, 0x40, 0x51, 0x88, 0x68, 0x85, 0x95, 0x51, 0x2f, 0xd2, 0x18, 0x42, 0xc1, 0x2b, 0x72,
	0x76, 0x5d, 0x5c, 0x14, 0x59, 0xc6, 0x72, 0x51, 0x3b, 0xc9, 0xe0, 0xc8, 0x0c, 0x06, 0x58, 0x4b,
	0xdc, 0xb7, 0xb1, 0xd4, 0xd0, 0x33, 0xf5, 0x97, 0x30, 0x4b, 0x58, 0xcf, 0xd3, 0xbf, 0x2c, 0xf0,
	0xf4, 0x09, 0xdd, 0x11, 0x96, 0xe9, 0x08, 0xdd, 0x47, 0xbd, 0x8e, 0x8f, 0xe4, 0x63, 0xd2, 0x1a,
	0x05, 0xc7, 0x32, 0x3e, 0x49, 0x2b, 0x16, 0x8b, 0xa2, 0x6a, 0x7a, 0x49, 0x83, 0xe5, 0x21, 0x23,
	0x39, 0x90, 0x8b, 0xb9, 0xef, 0x4c, 0x6d, 0xe9, 0x92, 0x96, 0x31, 0x6e, 0x7e, 0xd0, 0xe9, 0x43,
	0x7f, 0x58, 0x30, 0x41, 0xb9, 0xea, 0xd3, 0xee, 0x7b, 0x99, 0x8e, 0xc1, 0xe1, 0x71, 0x51, 0xb1,
	0x5a, 0x25, 0x05, 0xc8, 0x17, 0x70, 0x18, 0xab, 0xb5, 0x17, 0x45, 0x2e, 0xa4, 0x88, 0x6a, 0xdf,
	0x1d, 0x76, 0x5f, 0x37, 0xd4, 0x9b, 0xb4, 0x63, 0x36, 0xe9, 0xa3, 0xce, 0xf6, 0x78, 0x79, 0xfa,
	0x8f, 0x5d, 0x73, 0xb7, 0xac, 0x7a, 0x4d, 0x63, 0xf6, 0xed, 0x5a, 0x90, 0x73, 0x80, 0xf6, 0xad,
	0x25, 0x47, 0xf2, 0x86, 0x8c, 0x07, 0x3d, 0xe8, 0x52, 0xbc, 0xa4, 0x1f, 0xc9, 0x9b, 0xad, 0x57,
	0x8c, 0xdb, 0x3e, 0x20, 0xa3, 0x75, 0x88, 0x91, 0x73, 0x38, 0x68, 0xda, 0x1c, 0xc1, 0x56, 0xab,
	0x75, 0xd3, 0xc0, 0x24, 0x30, 0xfe, 0x6b, 0x70, 0xb7, 0xdd, 0x8d, 0xa0, 0x61, 0xf4, 0xb6, 0x18,
	0x74, 0x18, 0x5c, 0x72, 0x01, 0x93, 0x4e, 0xdb, 0x22, 0x27, 0x32, 0x6c, 0xb7, 0x2b, 0x06, 0x6f,
	0xf2, 0x98, 0xe4, 0x1c, 0xa0, 0x7d, 0x2d, 0x94, 0x0e, 0xc6, 0x33, 0x13, 0x74, 0x29, 0x5c, 0xb5,
	0x84, 0xa3, 0x9d, 0xea, 0x21, 0x7e, 0x13, 0xd9, 0xad, 0xc2, 0xe0, 0x7f, 0x66, 0x30, 0xd5, 0x37,
	0xe0, 0xe9, 0xf7, 0x45, 0x3e, 0x91, 0xb1, 0x1d, 0x83, 0x05, 0xbb, 0xa4, 0x5c, 0xfb, 0x30, 0xc0,
	0x1f, 0xb2, 0xb3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x02, 0x59, 0xe5, 0xa3, 0x09, 0x00,
	0x00,
}

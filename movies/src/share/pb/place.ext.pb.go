// Code generated by protoc-gen-go. DO NOT EDIT.
// source: place.ext.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HotCitiesByCinemaReq struct {
}

func (m *HotCitiesByCinemaReq) Reset()                    { *m = HotCitiesByCinemaReq{} }
func (m *HotCitiesByCinemaReq) String() string            { return proto.CompactTextString(m) }
func (*HotCitiesByCinemaReq) ProtoMessage()               {}
func (*HotCitiesByCinemaReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type HotCitiesByCinemaRep struct {
	P []*Place `protobuf:"bytes,1,rep,name=p" json:"p,omitempty"`
}

func (m *HotCitiesByCinemaRep) Reset()                    { *m = HotCitiesByCinemaRep{} }
func (m *HotCitiesByCinemaRep) String() string            { return proto.CompactTextString(m) }
func (*HotCitiesByCinemaRep) ProtoMessage()               {}
func (*HotCitiesByCinemaRep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *HotCitiesByCinemaRep) GetP() []*Place {
	if m != nil {
		return m.P
	}
	return nil
}

type Place struct {
	Count       int64  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Id          int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	N           string `protobuf:"bytes,3,opt,name=n" json:"n,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort" json:"pinyinShort,omitempty"`
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Place) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Place) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Place) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

func (m *Place) GetPinyinFull() string {
	if m != nil {
		return m.PinyinFull
	}
	return ""
}

func (m *Place) GetPinyinShort() string {
	if m != nil {
		return m.PinyinShort
	}
	return ""
}

func init() {
	proto.RegisterType((*HotCitiesByCinemaReq)(nil), "pb.HotCitiesByCinemaReq")
	proto.RegisterType((*HotCitiesByCinemaRep)(nil), "pb.HotCitiesByCinemaRep")
	proto.RegisterType((*Place)(nil), "pb.Place")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlaceServiceExt service

type PlaceServiceExtClient interface {
	// 获取有电影院的地点
	HotCitiesByCinema(ctx context.Context, in *HotCitiesByCinemaReq, opts ...client.CallOption) (*HotCitiesByCinemaRep, error)
}

type placeServiceExtClient struct {
	c           client.Client
	serviceName string
}

func NewPlaceServiceExtClient(serviceName string, c client.Client) PlaceServiceExtClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &placeServiceExtClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *placeServiceExtClient) HotCitiesByCinema(ctx context.Context, in *HotCitiesByCinemaReq, opts ...client.CallOption) (*HotCitiesByCinemaRep, error) {
	req := c.c.NewRequest(c.serviceName, "PlaceServiceExt.HotCitiesByCinema", in)
	out := new(HotCitiesByCinemaRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlaceServiceExt service

type PlaceServiceExtHandler interface {
	// 获取有电影院的地点
	HotCitiesByCinema(context.Context, *HotCitiesByCinemaReq, *HotCitiesByCinemaRep) error
}

func RegisterPlaceServiceExtHandler(s server.Server, hdlr PlaceServiceExtHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PlaceServiceExt{hdlr}, opts...))
}

type PlaceServiceExt struct {
	PlaceServiceExtHandler
}

func (h *PlaceServiceExt) HotCitiesByCinema(ctx context.Context, in *HotCitiesByCinemaReq, out *HotCitiesByCinemaRep) error {
	return h.PlaceServiceExtHandler.HotCitiesByCinema(ctx, in, out)
}

func init() { proto.RegisterFile("place.ext.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x9d, 0xac, 0x2b, 0x74, 0x2a, 0x16, 0x87, 0xa2, 0xc1, 0x83, 0x84, 0x9c, 0xf6, 0x14,
	0xa1, 0xfe, 0x03, 0x8b, 0xa2, 0x37, 0x49, 0xaf, 0x5e, 0xba, 0xdb, 0x80, 0x03, 0x6b, 0x32, 0xae,
	0xa9, 0xb4, 0x07, 0xff, 0xbb, 0x34, 0xbd, 0x14, 0xac, 0xb7, 0x79, 0xdf, 0x0c, 0x33, 0xf3, 0x1e,
	0x4e, 0xa4, 0x5f, 0x76, 0xc1, 0x85, 0x4d, 0x76, 0x32, 0xa4, 0x9c, 0x48, 0x49, 0x6b, 0xaf, 0x70,
	0xfa, 0x9c, 0xf2, 0x9c, 0x33, 0x87, 0xaf, 0x87, 0xed, 0x9c, 0x63, 0xf8, 0x58, 0xfa, 0xf0, 0x69,
	0xef, 0x8e, 0x72, 0xa1, 0x6b, 0x04, 0xd1, 0x60, 0xaa, 0x66, 0x3c, 0x1b, 0x39, 0x69, 0xdd, 0xeb,
	0x6e, 0xa7, 0x07, 0xb1, 0x3f, 0x58, 0x97, 0x9a, 0xa6, 0x58, 0x77, 0x69, 0x1d, 0xb3, 0x06, 0x03,
	0x4d, 0xe5, 0xf7, 0x82, 0x2e, 0x50, 0xf1, 0x4a, 0xab, 0x82, 0x14, 0xaf, 0xe8, 0x1c, 0x21, 0xea,
	0xca, 0x40, 0x33, 0xf2, 0x10, 0xe9, 0x16, 0x51, 0x38, 0x6e, 0x39, 0x3e, 0xad, 0xfb, 0x5e, 0x9f,
	0x16, 0x7c, 0x40, 0xc8, 0xe0, 0x78, 0xaf, 0x16, 0xef, 0x69, 0xc8, 0xba, 0x2e, 0x03, 0x87, 0x68,
	0xf6, 0x86, 0x93, 0x72, 0x7e, 0x11, 0x86, 0x6f, 0xee, 0xc2, 0xe3, 0x26, 0xd3, 0x0b, 0x5e, 0xfe,
	0xb1, 0x40, 0x7a, 0xf7, 0xf4, 0x31, 0xc7, 0x37, 0xff, 0x75, 0xc4, 0x9e, 0xb4, 0x67, 0x25, 0xb0,
	0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0xe3, 0x00, 0x5a, 0x43, 0x01, 0x00, 0x00,
}
